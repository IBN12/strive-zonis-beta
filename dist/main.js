(()=>{"use strict";var e={56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var c={},i=[],r=0;r<e.length;r++){var d=e[r],s=o.base?d[0]+o.base:d[0],l=c[s]||0,m="".concat(s," ").concat(l);c[s]=l+1;var A=t(m),f={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)n[A].references++,n[A].updater(f);else{var C=a(f,o);o.byIndex=r,n.splice(r,0,{identifier:m,updater:C,references:1})}i.push(m)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var c=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<c.length;i++){var r=t(c[i]);n[r].references--}for(var d=o(e,a),s=0;s<c.length;s++){var l=t(c[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}c=d}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:(e,n,t)=>{t.d(n,{A:()=>r});var o=t(354),a=t.n(o),c=t(314),i=t.n(c)()(a());i.push([e.id,"/* root - The main root of the application. */\n:root{\n    --user-card-height: 0;\n    --user-card-width: 0; \n}\n\n/* body - The entire body for the application. */\nbody{\n    padding: 0;\n    margin: 0;\n}\n\n*{\n    box-sizing: border-box;\n}\n\n/* |Home Sector Content| */\n.home-sector-content{\n    border: 1px solid orchid; \n}\n\n.no-click{\n    pointer-events: none;  \n}\n/***************************************************************************************************************************************************************************/\n/***************************************************************************************************************************************************************************/\n/* Mobile and Desktop Miniturization */\n\n/* Media-0 - For mobile viewports */\n@media only screen and (max-width: 1000px)\n{\n    /* |Main Content| */\n    #content{\n        border: 1px solid red;\n        padding: 5px; \n    }\n\n    /* |Main Menu Content| */\n    .main-menu-content{\n        display: flex;\n        flex-direction: column;\n        align-items: center; \n        gap: 10px;\n\n        border: 1px solid purple;\n        margin-top: 20px; /* Temporary during testing */\n    }\n\n    /* |Shuffle Cards Content| */\n    .shuffle-cards-content{\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n\n        border: 1px solid orange;\n        padding: 5px;\n        margin-top: 20px; \n    }\n\n    .display-cards-section{ /* Display cards container */\n        display: flex; \n        justify-content: center; \n        gap: 5px; \n\n        border: 1px solid blue;\n    }\n    .display-cards-section > div{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        border: 1px solid black;\n        width: 65px;\n        height: 65px;\n        font-size: 10px;\n        text-align: center;\n    }\n    .shuffle-card-animation{ /* Shuffle Card Animation for the Display cards container. */\n        animation-name: shuffleCardAnimation;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffleCardAnimation{\n        from {\n            transform: scale(1);\n        }\n        to {\n            transform: scale(1.2); \n        }\n    }\n\n    .card-info-window{ /* The main card info window for the each card being displayed in the 'Display Card Section'. */\n        position: relative;\n        top: -120px; /* This will change based on the final page size. */\n\n        border: 1px solid red; \n        background-color: rgba(255, 0, 0, 0.432);\n        padding: 10px; \n    }\n    .card-info-window > div{ /* Close Window Button Section */\n        display: flex;\n        justify-content: end; \n        border: 1px solid green;\n    }\n    .card-info-window > div > img[src]{\n        width: 50px;\n    }\n    .open-card-info-window{ /* Will open the card info window with a keyframe animation. */ \n        animation-name: openCardInfoWindow;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        /* animation-fill-mode: forwards; */\n    }\n    @keyframes openCardInfoWindow{\n        from{\n            transform: perspective(800px) translateZ(-4000px);\n        }\n        to{\n            transform: perspective(800px) translateZ(25px); \n        }\n    }\n    .close-card-info-window{ /* Will close the card info window with a keyframe animation. */\n        animation-name: closeCardInfoWindow;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes closeCardInfoWindow{\n        from{\n            transform: perspective(800px) translateZ(25px); \n        }\n        to{\n            transform: perspective(800px) translateZ(-4000px); \n        }\n    }\n\n    .shuffle-limit-reached{\n        animation-name: shuffleLimitReached;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        border: 1px solid red;\n    }\n    @keyframes shuffleLimitReached{\n        from{ \n            transform: scale(1)\n        }\n        to{\n            transform: scale(1.1); \n        }\n    }\n    .shuffle-limit-reached > span{\n        color: red; \n    }\n\n    /* |Battle Levels Content| */ \n    .battle-levels-content{\n        display: flex;\n        flex-direction: column;\n        gap: 20px; \n        border: 1px solid green; \n        margin-top: 20px; \n    }\n\n    .battle-level-section{ /* Battle Level Section */\n        text-align: center; \n        border: 1px solid blue; \n    }\n    .battle-level-section > h4{\n        margin: 0; \n    }\n\n    .battle-singularity-point-section{ /* Battle Sigularity Point Section */\n        display: flex;\n\n        border: 1px solid olive;\n    }\n    .battle-singularity-point-section > section{\n        flex: 1;\n        \n        text-align: center; \n        border: 1px solid black;\n    }\n    .sp-anim{\n        animation-name: singularityAnimation;\n        animation-duration: .7s;\n        animation-timing-function: ease-in-out; \n    }\n    @keyframes singularityAnimation{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: perspective(800px) translateZ(50px);   \n            border: 2px solid #facc15;\n        }\n    }\n\n    .battle-arena-section{ /* Battle Arena Section */ \n        display: flex; \n        justify-content: space-between;\n\n        border: 1px solid purple;\n        padding: 3px; \n    }\n    .battle-arena-section > section{ /* User card & Comp Card in the Battle Arena Section. */ \n        display: flex;\n\n        border: 1px solid black; \n        width: 80px; /* The width and height will change once the card art is implemented. */ \n        height: 80px; \n    }\n    .battle-arena-section > section:nth-child(2) > div{ /* Comp Card Battle Damage - Will contain damage animation. */\n        border: 1px solid black;\n        position: absolute;\n        animation-name: compCardDamageAnim;\n        animation-duration: 0.7s; \n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;  \n    }\n    @keyframes compCardDamageAnim{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: translate(-100px, -20px); \n        }\n    }\n    .battle-arena-section > section:nth-child(1) > div{ /* User Card Battle Damage - Will contain damage animation. */\n        border: 1px solid black;\n        position: absolute;\n        animation-name: userCardDamageAnim;\n        animation-duration: 0.7s; \n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards; \n    }\n    @keyframes userCardDamageAnim{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: translate(130px, -20px); \n        }\n    }\n    .death-anim{ /* Battle card death animation for both the user and computer. */\n        animation-name: deathAnim;\n        animation-timing-function: ease-in-out;\n        animation-duration: .8s;\n        background-color: rgba(255, 0, 0, 0.418);\n        border: 1px solid rgba(255, 0, 0, 0.418);\n    }\n    @keyframes deathAnim{\n        0%{\n            transform: perspective(800px) rotateY(0);\n        }\n        10%{\n            transform: perspective(800px) rotateY(10deg);\n        }\n        20%{\n            transform: perspective(800px) rotateY(40deg);\n        }\n        40%{\n            transform: perspective(800px) rotateY(-10deg); \n        }\n        60%{\n            transform: perspective(800px) rotateY(-40deg); \n        }\n        80%{\n            transform: perspective(800px) rotateY(10deg); \n        }\n        100%{\n            transform: perspective(800px) rotateY(40deg); \n        }\n    }\n\n    .battle-card-stats-section{ /* Battle Card Stats Section */\n        display: flex;\n        justify-content: space-between;\n        border: 1px solid cornflowerblue;\n        padding: 3px; \n    }\n    .battle-card-stats-section > section{ /* User Battle Card Stats & Comp Battle Card Stats */\n        display: flex;\n        flex-direction: column;\n        gap: 3px;\n        \n        border: 1px solid black;\n    }\n\n    .battle-card-deck-section{ /* Battle Card Deck Section */\n        display: flex;\n        justify-content: space-between;\n\n        border: 1px solid chocolate;\n        padding: 3px;\n    }\n    .battle-card-deck-section > section{ /* User Card Deck & Comp Card Deck */\n        display: flex;\n        justify-content: center;\n        gap: 10px; \n\n        padding: 3px;\n        border: 1px solid lightseagreen;\n    }\n    .battle-card-deck-section > section > div{ /* Each card in both deck sections */ \n        font-size: 10px; \n        border: 1px solid black; \n    }\n\n    .battle-command-section{ /* Battle Command Section */ \n        display: flex;\n        justify-content: space-around;\n\n        border: 1px solid lightcoral;\n        padding: 3px; \n    }\n    .user-card-attack-anim{ /* Battle Command: User Attack Anim */\n        animation-name: userAttackAnim;\n        animation-duration: 0.5s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes userAttackAnim{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(20px); \n        }\n    }\n    .comp-card-attack-anim{ /* Battle Commmand: Computer Attack Anim */\n        animation-name: compAttackAnim;\n        animation-duration: 0.5s;\n        animation-timing-function: ease-in-out; \n    }\n    @keyframes compAttackAnim{\n        from{\n            transform: translateX(0); \n        }\n        to{\n            transform: translateX(-20px);  \n        }\n    }\n    .user-card-defend-anim{ /* Battle Command: User Defend Attack Anim */\n        position: absolute; \n        background-color: #818df856;\n        border: 1px solid #818df856;\n        width: var(--user-card-width);\n        height: var(--user-card-height); \n    }\n\n} ","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"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",sourcesContent:["/* root - The main root of the application. */\n:root{\n    --user-card-height: 0;\n    --user-card-width: 0; \n}\n\n/* body - The entire body for the application. */\nbody{\n    padding: 0;\n    margin: 0;\n}\n\n*{\n    box-sizing: border-box;\n}\n\n/* |Home Sector Content| */\n.home-sector-content{\n    border: 1px solid orchid; \n}\n\n.no-click{\n    pointer-events: none;  \n}\n/***************************************************************************************************************************************************************************/\n/***************************************************************************************************************************************************************************/\n/* Mobile and Desktop Miniturization */\n\n/* Media-0 - For mobile viewports */\n@media only screen and (max-width: 1000px)\n{\n    /* |Main Content| */\n    #content{\n        border: 1px solid red;\n        padding: 5px; \n    }\n\n    /* |Main Menu Content| */\n    .main-menu-content{\n        display: flex;\n        flex-direction: column;\n        align-items: center; \n        gap: 10px;\n\n        border: 1px solid purple;\n        margin-top: 20px; /* Temporary during testing */\n    }\n\n    /* |Shuffle Cards Content| */\n    .shuffle-cards-content{\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n\n        border: 1px solid orange;\n        padding: 5px;\n        margin-top: 20px; \n    }\n\n    .display-cards-section{ /* Display cards container */\n        display: flex; \n        justify-content: center; \n        gap: 5px; \n\n        border: 1px solid blue;\n    }\n    .display-cards-section > div{\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        border: 1px solid black;\n        width: 65px;\n        height: 65px;\n        font-size: 10px;\n        text-align: center;\n    }\n    .shuffle-card-animation{ /* Shuffle Card Animation for the Display cards container. */\n        animation-name: shuffleCardAnimation;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffleCardAnimation{\n        from {\n            transform: scale(1);\n        }\n        to {\n            transform: scale(1.2); \n        }\n    }\n\n    .card-info-window{ /* The main card info window for the each card being displayed in the 'Display Card Section'. */\n        position: relative;\n        top: -120px; /* This will change based on the final page size. */\n\n        border: 1px solid red; \n        background-color: rgba(255, 0, 0, 0.432);\n        padding: 10px; \n    }\n    .card-info-window > div{ /* Close Window Button Section */\n        display: flex;\n        justify-content: end; \n        border: 1px solid green;\n    }\n    .card-info-window > div > img[src]{\n        width: 50px;\n    }\n    .open-card-info-window{ /* Will open the card info window with a keyframe animation. */ \n        animation-name: openCardInfoWindow;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        /* animation-fill-mode: forwards; */\n    }\n    @keyframes openCardInfoWindow{\n        from{\n            transform: perspective(800px) translateZ(-4000px);\n        }\n        to{\n            transform: perspective(800px) translateZ(25px); \n        }\n    }\n    .close-card-info-window{ /* Will close the card info window with a keyframe animation. */\n        animation-name: closeCardInfoWindow;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes closeCardInfoWindow{\n        from{\n            transform: perspective(800px) translateZ(25px); \n        }\n        to{\n            transform: perspective(800px) translateZ(-4000px); \n        }\n    }\n\n    .shuffle-limit-reached{\n        animation-name: shuffleLimitReached;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        border: 1px solid red;\n    }\n    @keyframes shuffleLimitReached{\n        from{ \n            transform: scale(1)\n        }\n        to{\n            transform: scale(1.1); \n        }\n    }\n    .shuffle-limit-reached > span{\n        color: red; \n    }\n\n    /* |Battle Levels Content| */ \n    .battle-levels-content{\n        display: flex;\n        flex-direction: column;\n        gap: 20px; \n        border: 1px solid green; \n        margin-top: 20px; \n    }\n\n    .battle-level-section{ /* Battle Level Section */\n        text-align: center; \n        border: 1px solid blue; \n    }\n    .battle-level-section > h4{\n        margin: 0; \n    }\n\n    .battle-singularity-point-section{ /* Battle Sigularity Point Section */\n        display: flex;\n\n        border: 1px solid olive;\n    }\n    .battle-singularity-point-section > section{\n        flex: 1;\n        \n        text-align: center; \n        border: 1px solid black;\n    }\n    .sp-anim{\n        animation-name: singularityAnimation;\n        animation-duration: .7s;\n        animation-timing-function: ease-in-out; \n    }\n    @keyframes singularityAnimation{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: perspective(800px) translateZ(50px);   \n            border: 2px solid #facc15;\n        }\n    }\n\n    .battle-arena-section{ /* Battle Arena Section */ \n        display: flex; \n        justify-content: space-between;\n\n        border: 1px solid purple;\n        padding: 3px; \n    }\n    .battle-arena-section > section{ /* User card & Comp Card in the Battle Arena Section. */ \n        display: flex;\n\n        border: 1px solid black; \n        width: 80px; /* The width and height will change once the card art is implemented. */ \n        height: 80px; \n    }\n    .battle-arena-section > section:nth-child(2) > div{ /* Comp Card Battle Damage - Will contain damage animation. */\n        border: 1px solid black;\n        position: absolute;\n        animation-name: compCardDamageAnim;\n        animation-duration: 0.7s; \n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;  \n    }\n    @keyframes compCardDamageAnim{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: translate(-100px, -20px); \n        }\n    }\n    .battle-arena-section > section:nth-child(1) > div{ /* User Card Battle Damage - Will contain damage animation. */\n        border: 1px solid black;\n        position: absolute;\n        animation-name: userCardDamageAnim;\n        animation-duration: 0.7s; \n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards; \n    }\n    @keyframes userCardDamageAnim{\n        from{\n            transform: translate(0);\n        }\n        to{\n            transform: translate(130px, -20px); \n        }\n    }\n    .death-anim{ /* Battle card death animation for both the user and computer. */\n        animation-name: deathAnim;\n        animation-timing-function: ease-in-out;\n        animation-duration: .8s;\n        background-color: rgba(255, 0, 0, 0.418);\n        border: 1px solid rgba(255, 0, 0, 0.418);\n    }\n    @keyframes deathAnim{\n        0%{\n            transform: perspective(800px) rotateY(0);\n        }\n        10%{\n            transform: perspective(800px) rotateY(10deg);\n        }\n        20%{\n            transform: perspective(800px) rotateY(40deg);\n        }\n        40%{\n            transform: perspective(800px) rotateY(-10deg); \n        }\n        60%{\n            transform: perspective(800px) rotateY(-40deg); \n        }\n        80%{\n            transform: perspective(800px) rotateY(10deg); \n        }\n        100%{\n            transform: perspective(800px) rotateY(40deg); \n        }\n    }\n\n    .battle-card-stats-section{ /* Battle Card Stats Section */\n        display: flex;\n        justify-content: space-between;\n        border: 1px solid cornflowerblue;\n        padding: 3px; \n    }\n    .battle-card-stats-section > section{ /* User Battle Card Stats & Comp Battle Card Stats */\n        display: flex;\n        flex-direction: column;\n        gap: 3px;\n        \n        border: 1px solid black;\n    }\n\n    .battle-card-deck-section{ /* Battle Card Deck Section */\n        display: flex;\n        justify-content: space-between;\n\n        border: 1px solid chocolate;\n        padding: 3px;\n    }\n    .battle-card-deck-section > section{ /* User Card Deck & Comp Card Deck */\n        display: flex;\n        justify-content: center;\n        gap: 10px; \n\n        padding: 3px;\n        border: 1px solid lightseagreen;\n    }\n    .battle-card-deck-section > section > div{ /* Each card in both deck sections */ \n        font-size: 10px; \n        border: 1px solid black; \n    }\n\n    .battle-command-section{ /* Battle Command Section */ \n        display: flex;\n        justify-content: space-around;\n\n        border: 1px solid lightcoral;\n        padding: 3px; \n    }\n    .user-card-attack-anim{ /* Battle Command: User Attack Anim */\n        animation-name: userAttackAnim;\n        animation-duration: 0.5s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes userAttackAnim{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(20px); \n        }\n    }\n    .comp-card-attack-anim{ /* Battle Commmand: Computer Attack Anim */\n        animation-name: compAttackAnim;\n        animation-duration: 0.5s;\n        animation-timing-function: ease-in-out; \n    }\n    @keyframes compAttackAnim{\n        from{\n            transform: translateX(0); \n        }\n        to{\n            transform: translateX(-20px);  \n        }\n    }\n    .user-card-defend-anim{ /* Battle Command: User Defend Attack Anim */\n        position: absolute; \n        background-color: #818df856;\n        border: 1px solid #818df856;\n        width: var(--user-card-width);\n        height: var(--user-card-height); \n    }\n\n} "],sourceRoot:""}]);const r=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,a,c){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var r=0;r<this.length;r++){var d=this[r][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&i[l[0]]||(void 0!==c&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=c),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),c="/*# ".concat(a," */");return[n].concat([c]).join("\n")}return[n].join("\n")}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var c=t.sourceMap;c&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}}},n={};function t(o){var a=n[o];if(void 0!==a)return a.exports;var c=n[o]={id:o,exports:{}};return e[o](c,c.exports,t),c.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var a=o.length-1;a>-1&&(!e||!/^http(s?):/.test(e));)e=o[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0;let o=[],a=[{name:"Tobo The Fighter",shortName:"Tobo",cate:"supra",attk:45,def:12,esse:100},{name:"The One From System",shortName:"Jace",cate:"supra",attk:44,def:14,esse:100},{name:"Spunky With The Funky Draco",shortName:"Spunky",cate:"supra",attk:39,def:17,esse:100},{name:"Allybelle",shortName:"Ally",cate:"fere",attk:27,def:15,esse:100},{name:"The Experiment",shortName:"Mason",cate:"fere",attk:24,def:13,esse:100},{name:"The Trendsetter Rotao",shortName:"Rotao",cate:"fere",attk:25,def:18,esse:100},{name:"Dan The Prol",shortName:"Dan",cate:"bonum",attk:19,def:22,esse:100},{name:"Mac The Rat",shortName:"Mac",cate:"bonum",attk:16,def:33,esse:100},{name:"A Karen",shortName:"Karen",cate:"bonum",attk:15,def:26,esse:100},{name:"The Office Worker Ken",shortName:"Ken",cate:"bonum",attk:16,def:25,esse:100}];const c={numberOfShuffles:0,shuffleLimitReached:!1,currentLevel:1,dataModelAddedTo:!1,battleCard:null,switchedCards:!1,userTurn:!1,userSingularityPoints:0,userPreviousSingularityPoints:0,battleCardDeathAnimAdded:!1,userAction:null,userAttkPoint:0,userAttkDamage:0,compBattleCard:null,compSwitchedCards:!1,compCardDeckCreated:!1,compSingularityPoints:0,compPreviousSingularityPoints:0,compTurn:!1,compCardDeathAnimAdded:!1,compAction:null,compAttkDamage:0};function i(e,n){if("Shuffle Cards Content"===e){const e=document.querySelectorAll(".shuffle-cards-content > div > div"),t=document.querySelectorAll(".shuffle-cards-content > button");"open card info window"===n?(e.forEach((e=>{e.classList.add("no-click")})),t.forEach((e=>{e.disabled=!0}))):"close card info window"===n?(e.forEach((e=>{e.classList.remove("no-click")})),t.forEach((e=>{e.disabled=!1}))):"shuffle cards"===n&&e.forEach((e=>{e.classList.add("no-click")}))}else if("Battle Levels Content"===e){const e=document.querySelectorAll(".battle-command-section > button"),t=document.querySelectorAll(".battle-card-deck-section > section > div");"Attack"===n?(t.forEach((e=>{e.classList.add("no-click")})),e.forEach((e=>{e.disabled=!0}))):"Attack Sequence Done"===n&&(t.forEach((e=>{e.classList.remove("no-click")})),e.forEach((e=>{e.disabled=!1}))),"Defend"===n&&(t.forEach((e=>e.classList.add("no-click"))),e.forEach((e=>e.disabled=!0)))}}const r=t.p+"5b9eb662f103822a4a50.svg",d=[{level:1,levelName:"The Unknown Birth",levelCompleted:!1},{level:2,levelName:"Dear Friend",levelCompleted:!1}],s=[{name:"Renoy Bright",shortName:"Renoy",levelCard:1,cate:"supra",attk:43,def:13,esse:100,defeated:!1,confidence:2,confidenceLost:0},{name:"Chairman Sam",shortName:"Chairman",levelCard:1,cate:"fere",attk:25,def:19,esse:100,defeated:!1,confidence:2,confidenceLost:0},{name:"Guard 1",shortName:"Guard 1",levelCard:1,cate:"bonum",attk:14,def:25,esse:100,defeated:!1,confidence:2,confidenceLost:0},{name:"Guard 2",shortName:"Guard 2",levelCard:1,cate:"bonum",attk:14,def:25,esse:100,defeated:!1,confidence:2,confidenceLost:0},{name:"Tales Venoy",shortName:"Tales",levelCard:2,cate:"supra",attk:0,def:0,esse:100,defeated:!1,confidence:2,confidenceLost:0}];let l=[];function m(e,n,t){let o=null,a=0;if("Defend"===c.userAction&&(0===c.compAttkDamage?t=0:a=c.compAttkDamage),"Attack"===e){switch(t){case 0:o=0;break;case 1/3:o=10-a;break;case.5:o=20-a;break;case 2/3:o=30-a;break;case 3/4:o=40-a;break;case 1:o=50-a;break;default:o=null}"Player"===n?c.userSingularityPoints+=o:c.compSingularityPoints+=o}}function A(e,n,t){console.log(e),t?n.forEach(((e,t)=>{e.defeated&&n.splice(t,1)})):(e.defeated=!0,e.esse=0)}function f(e,n,t,o){const a=[1/3,.5,0,2/3,3/4,1,0];if("Player"===n){if("Attack"===e){const i=Math.floor(Math.random()*a.length);let r=t.attk*a[i];return r=Number(r.toFixed(0)),o.esse-=r,c.userAttkDamage=r,c.userAttkPoint=a[i],o.esse<=0&&(console.log(`${o.name} has been defeated!`),A(o,l,c.compCardDeathAnimAdded)),m(e,n,a[i]),0===r?"Missed!":0!==r&&1!==r?`${r} Hit!`:`${r} Critical Hit!`}if("Defend"===e)return"Defending"}else if("Computer"===n&&"Attack"===e){c.compAction="Attack";let i=0;const r=Math.floor(Math.random()*a.length);let d=o.attk*a[r];return d=Number(d.toFixed(0)),"Defend"===c.userAction?(c.userAction=null,0!==d?(i=t.def,d-t.def<=0?(t.esse-=0,c.compAttkDamage=0):(t.esse-=d-t.def,c.compAttkDamage=d-t.def,console.log("Computer Attack damage after user defends: ",d-t.def))):(t.esse-=d,c.compAttkDamage=d)):(t.esse-=d,c.compAttkDamage=d),m(e,n,a[r]),0===d?"Missed!":0!==d&&1!==d?0===c.compAttkDamage?"0 Hit!":d-i+" Hit!":d-i+" Critical Hit!"}}const C=new class{constructor(){this.esseHistory=[],this.transition=0}AddToEsseHistory(e){e.forEach((e=>this.esseHistory.push({name:e.name})))}SetEsseHistory(e,n,t){this.esseHistory.forEach(((o,a)=>{o.name===e&&(this.esseHistory[a][n]=t)}))}},p={confidenceLostFromCateEval:0,confidenceForSupraCate:.5,confidenceForFereCate:.3,confidenceForBonumCate:.1,confidenceLostFromAttkPtEval:0,confidenceForOneThird:.1,confidenceForOneHalf:.2,confidenceForTwoThirds:.3,confidenceForThreeFourths:.4,confidenceForOne:.5};function u(e){c.dataModelAddedTo||(C.AddToEsseHistory(l),c.dataModelAddedTo=!0),"Before"===e?(console.log("Data Analysis Before Computer Move."),0===p.confidenceLostFromCateEval?"supra"===c.battleCard.cate?(console.log(`Player card evaluated as ${c.battleCard.cate}`),console.log("Computer confidence lost by .5"),c.compBattleCard.confidence-=.5,c.compBattleCard.confidenceLost+=.5,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost),p.confidenceLostFromCateEval=.5,p.confidenceForSupraCate=0):"fere"===c.battleCard.cate?(console.log(`Player card evaluated as ${c.battleCard.cate}.`),console.log("Computer confidence lost by .3"),c.compBattleCard.confidence-=.3,c.compBattleCard.confidenceLost+=.3,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost),p.confidenceLostFromCateEval=.3,p.confidenceForFereCate=0):"bonum"===c.battleCard.cate&&(console.log(`Player card evaluated as ${c.battleCard.cate}`),console.log("Computer confidence lost by .1"),c.compBattleCard.confidence-=.1,c.compBattleCard.confidenceLost+=.1,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost),p.confidenceLostFromCateEval=.1,p.confidenceForBonumCate=0):"supra"===c.battleCard.cate?(console.log("Player card evaluated as supra"),.3===p.confidenceLostFromCateEval?(p.confidenceLostFromCateEval=.5,p.confidenceForSupraCate=0,p.confidenceForFereCate=.3,c.compBattleCard.confidence+=p.confidenceForFereCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForFereCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost)):.1===p.confidenceLostFromCateEval&&(p.confidenceLostFromCateEval=.5,p.confidenceForSupraCate=0,p.confidenceForBonumCate=.1,c.compBattleCard.confidence+=p.confidenceForBonumCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForBonumCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost))):"fere"===c.battleCard.cate?(console.log("Player card evaluated as fere"),.5===p.confidenceLostFromCateEval?(p.confidenceLostFromCateEval=.3,p.confidenceForFereCate=0,p.confidenceForSupraCate=.5,c.compBattleCard.confidence+=p.confidenceForSupraCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForSupraCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost)):.1===p.confidenceLostFromCateEval&&(p.confidenceLostFromCateEval=.3,p.confidenceForFereCate=0,p.confidenceForBonumCate=.1,c.compBattleCard.confidence+=p.confidenceForBonumCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForBonumCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost))):"bonum"===c.battleCard.cate&&(console.log("Player card evaluated as bonum"),.5===p.confidenceLostFromCateEval?(p.confidenceLostFromCateEval=.1,p.confidenceForBonumCate=0,p.confidenceForSupraCate=.5,c.compBattleCard.confidence+=p.confidenceForSupraCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForSupraCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost)):.3===p.confidenceLostFromCateEval&&(p.confidenceLostFromCateEval=.1,p.confidenceForBonumCate=0,p.confidenceForFereCate=.3,c.compBattleCard.confidence+=p.confidenceForFereCate,c.compBattleCard.confidence-=p.confidenceLostFromCateEval,c.compBattleCard.confidenceLost-=p.confidenceForFereCate,c.compBattleCard.confidenceLost+=p.confidenceLostFromCateEval,console.log("Confidence: ",c.compBattleCard.confidence),console.log("Confidence Lost: ",c.compBattleCard.confidenceLost))),console.log("\nEvaluating the player action..."),"Attack"===c.userAction?0===p.confidenceLostFromAttkPtEval?c.userAttkPoint===1/3?(p.confidenceLostFromAttkPtEval=.1,p.confidenceForOneThird=0,c.compBattleCard.confidence-=.1,c.compBattleCard.confidenceLost+=.1):.5===c.userAttkPoint?(p.confidenceLostFromAttkPtEval=.2,p.confidenceForOneHalf=0,c.compBattleCard.confidence-=.2,c.compBattleCard.confidenceLost+=.2):c.userAttkPoint===2/3?(p.confidenceLostFromAttkPtEval=.3,p.confidenceForTwoThirds=0,c.compBattleCard.confidence-=.3,c.compBattleCard.confidenceLost+=.3):c.userAttkPoint===3/4?(p.confidenceLostFromAttkPtEval=.4,p.confidenceForThreeFourths=0,c.compBattleCard.confidence-=.4,c.compBattleCard.confidenceLost+=.4):1===c.userAttkPoint&&(p.confidenceLostFromAttkPtEval=.5,p.confidenceForOne=0,c.compBattleCard.confidence-=.5,c.compBattleCard.confidenceLost+=.5):c.userAttkPoint===1/3?.2===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval,p.confidenceForOneThird=0,p.confidenceForOneHalf=.2,c.compBattleCard.confidence+=p.confidenceForOneHalf,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneHalf,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.3===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval,p.confidenceForOneThird=0,p.confidenceForTwoThirds=.3,c.compBattleCard.confidence+=p.confidenceForTwoThirds,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForTwoThirds,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.4===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.1,p.confidenceForOneThird=0,p.confidenceForThreeFourths=.4,c.compBattleCard.confidence+=p.confidenceForThreeFourths,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForThreeFourths,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.5===p.confidenceLostFromAttkPtEval&&(p.confidenceLostFromAttkPtEval=.1,p.confidenceForOneThird=0,p.confidenceForOne=.5,c.compBattleCard.confidence+=p.confidenceForOne,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOne,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.5===c.userAttkPoint?.1===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.2,p.confidenceForOneHalf=0,p.confidenceForOneThird=.1,c.compBattleCard.confidence+=p.confidenceForOneThird,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneThird,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.3===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.2,p.confidenceForOneHalf=0,p.confidenceForTwoThirds=.3,c.compBattleCard.confidence+=p.confidenceForTwoThirds,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForTwoThirds,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.4===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.2,p.confidenceForOneHalf=0,p.confidenceForThreeFourths=.4,c.compBattleCard.confidence+=p.confidenceForThreeFourths,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForThreeFourths,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.5===p.confidenceLostFromAttkPtEval&&(p.confidenceLostFromAttkPtEval=.2,p.confidenceForOneHalf=0,p.confidenceForOne=.5,c.compBattleCard.confidence+=p.confidenceForOne,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOne,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):c.userAttkPoint===2/3?.1===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.3,p.confidenceForTwoThirds=0,p.confidenceForOneThird=.1,c.compBattleCard.confidence+=p.confidenceForOneThird,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneThird,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.2===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.3,p.confidenceForTwoThirds=0,p.confidenceForOneHalf=.2,c.compBattleCard.confidence+=p.confidenceForOneHalf,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneHalf,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.4===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.3,p.confidenceForTwoThirds=0,p.confidenceForThreeFourths=.4,c.compBattleCard.confidence+=p.confidenceForThreeFourths,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForThreeFourths,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.5===p.confidenceLostFromAttkPtEval&&(p.confidenceLostFromAttkPtEval=.3,p.confidenceForTwoThirds=0,p.confidenceForOne=.5,c.compBattleCard.confidence+=p.confidenceForOne,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOne,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):c.userAttkPoint===3/4?.1===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.4,p.confidenceForThreeFourths=0,p.confidenceForOneThird=.1,c.compBattleCard.confidence+=p.confidenceForOneThird,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneThird,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.2===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.4,p.confidenceForThreeFourths=0,p.confidenceForOneHalf=.2,c.compBattleCard.confidence+=p.confidenceForOneHalf,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneHalf,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.3===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.4,p.confidenceForThreeFourths=0,p.confidenceForTwoThirds=.3,c.compBattleCard.confidence+=p.confidenceForTwoThirds,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForTwoThirds,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.5===p.confidenceLostFromAttkPtEval&&(p.confidenceLostFromAttkPtEval=.4,p.confidenceForThreeFourths=0,p.confidenceForOne=.5,c.compBattleCard.confidence+=p.confidenceForOne,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOne,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):1===c.userAttkPoint&&(.1===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.5,p.confidenceForOne=0,p.confidenceForOneThird=.1,c.compBattleCard.confidence+=p.confidenceForOneThird,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneThird,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.2===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.5,p.confidenceForOne=0,p.confidenceForOneHalf=.2,c.compBattleCard.confidence+=p.confidenceForOneHalf,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForOneHalf,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.3===p.confidenceLostFromAttkPtEval?(p.confidenceLostFromAttkPtEval=.5,p.confidenceForOne=0,p.confidenceForTwoThirds=.3,c.compBattleCard.confidence+=p.confidenceForTwoThirds,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForTwoThirds,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval):.4===p.confidenceLostFromAttkPtEval&&(p.confidenceLostFromAttkPtEval=.5,p.confidenceForOne=0,p.confidenceForThreeFourths=.4,c.compBattleCard.confidence+=p.confidenceForThreeFourths,c.compBattleCard.confidence-=p.confidenceLostFromAttkPtEval,c.compBattleCard.confidenceLost-=p.confidenceForThreeFourths,c.compBattleCard.confidenceLost+=p.confidenceLostFromAttkPtEval)):c.userAction,console.log("Before - Computer Esse: ",c.compBattleCard.esse),console.log("Before - Player Esse: ",c.battleCard.esse),console.log("\n")):"After"===e&&(console.log("Data Analysis After Computer Move."),console.log("After - Computer Esse: ",c.compBattleCard.esse),console.log("After - Player Esse: ",c.battleCard.esse),console.log("\n"))}function h(e){c.compCardDeckCreated||(s.forEach((e=>{e.levelCard===c.currentLevel&&l.push(e)})),c.compCardDeckCreated=!0);const n=document.querySelector(".battle-levels-content"),t=document.querySelector(".battle-singularity-point-section"),o=document.querySelector(".battle-arena-section"),a=document.querySelector(".battle-card-stats-section"),i=document.querySelector(".battle-card-deck-section"),r=document.querySelector(".battle-command-section");0===e?(function(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-level-section");const t=document.createElement("h4");d.forEach((e=>{e.level===c.currentLevel&&(t.textContent=`Level: ${e.level} - ${e.levelName}`)})),n.appendChild(t),e.appendChild(n)}(),B(),v(),g(),b(),F()):1===e?(n.removeChild(t),n.removeChild(o),n.removeChild(a),n.removeChild(i),n.removeChild(r),B(),v(),g(),b(),F()):2===e?(c.compTurn&&u("After"),n.removeChild(t),n.removeChild(o),n.removeChild(a),n.removeChild(i),n.removeChild(r),B(),v(),g(),b(),F(),function(){const e=document.querySelector(".battle-arena-section > section:nth-child(1)");if("Defend"===c.userAction){const n=document.createElement("section");n.classList.add("user-card-defend-anim");let t=e.clientHeight,o=e.clientWidth;document.documentElement.style.setProperty("--user-card-height",`${t}px`),document.documentElement.style.setProperty("--user-card-width",`${o}px`),e.appendChild(n)}}()):3===e&&(n.removeChild(a),n.removeChild(i),n.removeChild(r),g(),b(),F(),h(2),setTimeout((()=>{document.querySelector(".battle-arena-section > section:nth-child(2)").classList.add("death-anim"),c.compCardDeathAnimAdded=!0,A(c.compBattleCard,l,c.compCardDeathAnimAdded),c.compCardDeathAnimAdded=!1}),1600),setTimeout((()=>{h(1)}),2500))}function B(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-singularity-point-section");const t=document.createElement("section");c.userSingularityPoints>0&&c.userTurn?(c.userTurn=!1,c.userSingularityPoints>c.userPreviousSingularityPoints&&t.classList.add("sp-anim"),t.textContent=`${c.userSingularityPoints} SP`,c.userPreviousSingularityPoints=c.userSingularityPoints,console.log("Player SP: ",c.userSingularityPoints),console.log("\n")):(c.userTurn=!1,t.textContent=`${c.userSingularityPoints} SP`);const o=document.createElement("section");c.compSingularityPoints>0&&c.compTurn?(c.compTurn=!1,c.compSingularityPoints>c.compPreviousSingularityPoints&&o.classList.add("sp-anim"),o.textContent=`${c.compSingularityPoints} SP`,c.compPreviousSingularityPoints=c.compSingularityPoints,console.log("Computer SP: ",c.compSingularityPoints),console.log("\n")):(c.compTurn=!1,o.textContent=`${c.compSingularityPoints} SP`),n.appendChild(t),n.appendChild(o),e.appendChild(n)}function v(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-arena-section");const t=document.createElement("section");c.switchedCards?t.textContent=c.battleCard.name:(c.battleCard=o[0],t.textContent=o[0].name);const a=document.createElement("section");c.compSwitchedCards?console.log("The Computer has switched cards"):(c.compBattleCard=l[0],a.textContent=l[0].name),n.appendChild(t),n.appendChild(a),e.appendChild(n)}function g(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-card-stats-section");const t=document.createElement("section");o.forEach((e=>{if(e.name===c.battleCard.name){const n=document.createElement("div");n.textContent=`Cate: ${e.cate}`;const o=document.createElement("div");o.textContent=`Attk: ${e.attk}`;const a=document.createElement("div");a.textContent=`Def: ${e.def}`;const c=document.createElement("div");c.textContent=`Esse: ${e.esse}`,t.appendChild(n),t.appendChild(o),t.appendChild(a),t.appendChild(c)}}));const a=document.createElement("section");l.forEach((e=>{if(e.name===c.compBattleCard.name){const n=document.createElement("div");n.textContent=`Cate: ${e.cate}`;const t=document.createElement("div");t.textContent=`Attk: ${e.attk}`;const o=document.createElement("div");o.textContent=`Def: ${e.def}`;const c=document.createElement("div");c.textContent=`Esse: ${e.esse}`,a.appendChild(n),a.appendChild(t),a.appendChild(o),a.appendChild(c)}})),n.appendChild(t),n.appendChild(a),e.appendChild(n)}function b(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-card-deck-section");const t=document.querySelector(".battle-arena-section > section:nth-child(1)"),a=document.querySelector(".battle-arena-section > section:nth-child(2)"),i=document.createElement("section");for(let e=0;e<o.length;e++)if(o[e].name!==t.textContent){const n=document.createElement("div");n.textContent=o[e].shortName,n.addEventListener("click",k),i.appendChild(n)}const r=document.createElement("section");s.forEach((e=>{if(e.name!==a.textContent&&e.levelCard===c.currentLevel&&!e.defeated){const n=document.createElement("div");n.textContent=e.shortName,r.appendChild(n)}})),n.appendChild(i),n.appendChild(r),e.appendChild(n)}function k(e){c.switchedCards=!0,o.forEach((n=>{n.shortName===e.target.textContent&&(c.battleCard=n)})),h(1)}function F(){const e=document.querySelector(".battle-levels-content"),n=document.createElement("section");n.classList.add("battle-command-section");const t=document.createElement("button");t.textContent="Attack";const o=document.createElement("button");o.textContent="Defend",t.addEventListener("click",L),o.addEventListener("click",L),n.appendChild(t),n.appendChild(o),e.appendChild(n)}function L(e){const n=document.querySelector(".battle-arena-section > section:nth-child(2)"),t=document.querySelector(".battle-arena-section > section:nth-child(1)");if(c.userTurn=!0,console.log("Player Action..."),"Attack"===e.target.textContent){c.userAction=e.target.textContent,i("Battle Levels Content","Attack"),t.classList.add("user-card-attack-anim");const o=f("Attack","Player",c.battleCard,c.compBattleCard),a=document.createElement("div");a.textContent=o,setTimeout((()=>{n.appendChild(a)}),500),c.compBattleCard.defeated?setTimeout((()=>{t.classList.remove("user-card-attack-anim"),n.removeChild(a),h(3),i("Battle Levels Content","Attack"),p.confidenceForBonumCate=.1,p.confidenceForFereCate=.3,p.confidenceForSupraCate=.5,p.confidenceLostFromCateEval=0}),1200):(setTimeout((()=>{t.classList.remove("user-card-attack-anim");const e=document.querySelector(".battle-arena-section > section:nth-child(2) > div");n.removeChild(e),h(2),i("Battle Levels Content","Attack")}),1300),setTimeout((()=>{E()}),1900))}if("Defend"===e.target.textContent){c.userAction=e.target.textContent,i("Battle Levels Content","Defend");const n=document.createElement("section");n.classList.add("user-card-defend-anim");let o=t.clientHeight,a=t.clientWidth;document.documentElement.style.setProperty("--user-card-height",`${o}px`),document.documentElement.style.setProperty("--user-card-width",`${a}px`);const r=f("Defend","Player",c.battleCard,c.compBattleCard),d=document.createElement("div");d.textContent=r,t.appendChild(d),t.appendChild(n),setTimeout((()=>{h(2),i("Battle Levels Content","Defend")}),1e3),setTimeout((()=>{E()}),1300)}}function E(){const e=document.querySelector(".battle-arena-section > section:nth-child(2)"),n=document.querySelector(".battle-arena-section > section:nth-child(1)");c.compTurn=!0,console.log("Computer Action..."),u("Before");{e.classList.add("comp-card-attack-anim");const t=f("Attack","Computer",c.battleCard,c.compBattleCard),o=document.createElement("div");o.textContent=t,setTimeout((()=>{n.appendChild(o)}),500),setTimeout((()=>{e.classList.remove("comp-card-attack-anim"),n.removeChild(o),h(2),i("Battle Levels Content","Attack")}),1300),setTimeout((()=>{i("Battle Levels Content","Attack Sequence Done")}),1900)}}function x(e){const n=document.querySelector(".shuffle-cards-content");if(0===e)y(),w(),P(),S();else if(1===e)n.replaceChildren(),y(),w(),P(),S();else if(2===e){const e=document.querySelector(".shuffle-cards-content > button:nth-child(2)"),t=document.querySelector(".shuffle-cards-content > button:nth-child(3)");n.removeChild(e),n.removeChild(t),P(),S()}}function y(){const e=document.querySelector(".shuffle-cards-content"),n=document.createElement("div");n.classList.add("display-cards-section");for(let e=0;e<4;e++){const e=document.createElement("div");n.appendChild(e)}e.appendChild(n)}function w(){const e=document.querySelectorAll(".display-cards-section > div");0===o.length?e.forEach((e=>{e.textContent="No Card"})):e.forEach(((e,n)=>{e.textContent=`${o[n].name}`,e.addEventListener("click",Q)}))}function Q(e){const n=document.querySelector(".shuffle-cards-content");console.log(e.target);const t=document.createElement("div");t.classList.add("card-info-window"),t.classList.add("open-card-info-window");const o=document.createElement("div"),a=document.createElement("img");a.src=r,o.appendChild(a),a.addEventListener("click",I),i("Shuffle Cards Content","open card info window"),t.appendChild(o),n.appendChild(t)}function I(){const e=document.querySelector(".shuffle-cards-content"),n=document.querySelector(".card-info-window");n.classList.remove("open-card-info-window"),n.classList.add("close-card-info-window"),setTimeout((()=>{e.removeChild(n)}),500),setTimeout((()=>{i("Shuffle Cards Content","close card info window")}),700)}function P(){const e=document.querySelector(".shuffle-cards-content"),n=document.createElement("button");3===c.numberOfShuffles?(console.log("Shuffle limit reached"),c.shuffleLimitReached=!0,n.removeEventListener("click",D),n.classList.add("shuffle-limit-reached"),n.innerHTML=`Shuffle (${c.numberOfShuffles}) <span>Limit Reached</span>`,n.addEventListener("click",(()=>{x(2)}))):(n.addEventListener("click",D),n.textContent=`Shuffle (${c.numberOfShuffles})`),e.appendChild(n)}function S(){const e=document.querySelector(".shuffle-cards-content"),n=document.createElement("button");n.textContent="Start",0===o.length&&(n.disabled=!0),n.addEventListener("click",T),e.appendChild(n)}function T(){h(0)}function D(e){o=function(){let e=[],n=[],t=[],o=[];var c;a.forEach((o=>{"supra"===o.cate?e.push(o):"fere"===o.cate?n.push(o):"bonum"===o.cate&&t.push(o)})),o.push(e[(c=e.length,Math.floor(Math.random()*c))]),o.push(n[function(e){return Math.floor(Math.random()*e)}(n.length)]);const i=function(e){let n=!1,t=[];const o=Math.floor(Math.random()*e);for(;!n;){const a=Math.floor(Math.random()*e);o!==a&&(t.push(o),t.push(a),n=!0)}return t}(t.length);return o.push(t[i[0]]),o.push(t[i[1]]),o}(),console.log(o),c.numberOfShuffles++,console.log("Shuffles: ",c.numberOfShuffles),console.log("\n"),i("Shuffle Cards Content","shuffle cards"),document.querySelectorAll(".shuffle-cards-content > button").forEach((e=>{e.disabled=!0})),document.querySelectorAll(".display-cards-section > div").forEach(((e,n)=>{switch(n){case 0:e.classList.add("shuffle-card-animation"),setTimeout((()=>{e.classList.remove("shuffle-card-animation")}),1e3);break;case 1:setTimeout((()=>{e.classList.add("shuffle-card-animation")}),1e3),setTimeout((()=>{e.classList.remove("shuffle-card-animation")}),2e3);break;case 2:setTimeout((()=>{e.classList.add("shuffle-card-animation")}),2e3),setTimeout((()=>{e.classList.remove("shuffle-card-animation")}),3e3);break;case 3:setTimeout((()=>{e.classList.add("shuffle-card-animation")}),3e3),setTimeout((()=>{e.classList.remove("shuffle-card-animation")}),4e3);break;default:return}})),setTimeout((()=>{x(1)}),4500)}var O=t(72),Y=t.n(O),q=t(825),M=t.n(q),H=t(659),j=t.n(H),N=t(56),W=t.n(N),$=t(540),U=t.n($),R=t(113),z=t.n(R),J=t(159),Z={};Z.styleTagTransform=z(),Z.setAttributes=W(),Z.insert=j().bind(null,"head"),Z.domAPI=M(),Z.insertStyleElement=U(),Y()(J.A,Z),J.A&&J.A.locals&&J.A.locals,console.log("Application will initiate"),function(){const e=document.getElementById("content"),n=document.createElement("div");n.classList.add("home-sector-content"),e.appendChild(n)}(),function(){const e=document.getElementById("content"),n=document.createElement("div");n.classList.add("main-menu-content"),e.appendChild(n)}(),function(){const e=document.getElementById("content"),n=document.createElement("div");n.classList.add("shuffle-cards-content"),e.appendChild(n)}(),function(){const e=document.getElementById("content"),n=document.createElement("div");n.classList.add("battle-levels-content"),e.appendChild(n)}(),x(0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,